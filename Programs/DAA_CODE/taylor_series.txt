// C++ implementation of the approach
#include <iostream>
using namespace std;

double e(int x, int n)
{
	static double p = 1, f = 1;
	double r;

	if (n == 0)
		return 1;

	r = e(x, n - 1);

	p = p * x;

	f = f * n;

	return (r + p / f);
}

int main()
{
	int x = 4, n = 15;
	cout<<"\n"<< e(x, n);

	return 0;
}


/////////////////////////////////////////////////////////////////////////

// C++ Efficient program to calculate
// e raise to the power x
#include <bits/stdc++.h>
using namespace std;

float exponential(int n, float x)
{
	float sum = 1.0f; 

	for (int i = n - 1; i > 0; --i )
		sum = 1 + x * sum / i;

	return sum;
}

int main()
{
	int n = 10;
	float x = 1.0f;
	cout << "e^x = " << fixed << setprecision(5) << exponential(n, x);
	return 0;
}


